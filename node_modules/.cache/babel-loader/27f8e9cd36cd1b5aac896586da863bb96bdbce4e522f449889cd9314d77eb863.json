{"ast":null,"code":"import React,{useState,useRef}from'react';import{APIProvider,Map,useMap,useMapsLibrary}from'@vis.gl/react-google-maps';import{PlaceAutocompleteClassic}from'./autocomplete-classic';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const serverPort=3001;const googleMapsApiKey=\"AIzaSyDjpkA1wkyhf5VjzfkeIOqP9IzZLn55C80\";const containerStyle={width:'100%',height:'400px'};const center={lat:49.8951,lng:-97.1384};// Define a symbol using SVG path notation, with an opacity of 1.\nconst lineSymbol={path:\"M 0,-1 0,1\",strokeOpacity:1,scale:4};const polylineOptions={geodesic:true,strokeColor:'#FF0000',strokeOpacity:0,strokeWeight:2,icons:[{icon:lineSymbol,offset:\"0\",repeat:\"20px\"}]};const App=()=>{// const { isLoaded } = useJsApiLoader({\n//   googleMapsApiKey: googleMapsApiKey,\n//   libraries: libraries,\n// });\nconst[origin,setOrigin]=useState('');const[destination,setDestination]=useState('');const[currentPosition,setCurrentPosition]=useState(null);const[routePlans,setRoutePlans]=useState([]);const[selectedPlanIndex,setSelectedPlanIndex]=useState(0);const[scores,setScores]=useState([]);// console.log(currentPosition);\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(APIProvider,{apiKey:googleMapsApiKey,children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Commute Compass\"}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'10px'},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Origin:\"}),/*#__PURE__*/_jsx(PlaceAutocompleteClassic,{onPlaceSelect:setOrigin,currPos:currentPosition}),/*#__PURE__*/_jsx(\"strong\",{children:\"Destination:\"}),/*#__PURE__*/_jsx(PlaceAutocompleteClassic,{onPlaceSelect:setDestination,currPos:currentPosition}),/*#__PURE__*/_jsx(GetRouteButton,{origin:origin,destination:destination,setPlans:setRoutePlans,setScores:setScores,setSelected:setSelectedPlanIndex})]}),/*#__PURE__*/_jsx(\"div\",{style:containerStyle,children:/*#__PURE__*/_jsx(Map,{defaultZoom:12,defaultCenter:center,gestureHandling:'greedy',disableDefaultUI:false})}),/*#__PURE__*/_jsx(GetCurrentCoord,{setPos:setCurrentPosition}),/*#__PURE__*/_jsx(Directions,{currPos:currentPosition}),/*#__PURE__*/_jsx(RouteCards,{routePlans:routePlans,routeScores:scores,setSelected:setSelectedPlanIndex}),/*#__PURE__*/_jsx(DisplayRoute,{routePlans:routePlans,selectedPlanIndex:selectedPlanIndex})]})});};function GetCurrentCoord(_ref){let{setPos}=_ref;React.useEffect(()=>{const fetchCurrentPosition=async()=>{try{const pos=await getCurrentCoord();setPos(pos);}catch(error){console.error(error);}};fetchCurrentPosition();},[]);const getCurrentCoord=()=>{return new Promise((resolve,reject)=>{if(navigator.geolocation){navigator.geolocation.getCurrentPosition(position=>{const pos={lat:position.coords.latitude,lng:position.coords.longitude};resolve(pos);},()=>{console.error(\"Error: The Geolocation service failed.\");reject(\"Error: The Geolocation service failed.\");});}else{console.error(\"Error: Your browser doesn't support geolocation.\");reject(\"Error: Your browser doesn't support geolocation.\");}});};}function Directions(_ref2){let{currPos}=_ref2;// const places = useMapsLibrary('places');\n// const routes = useMapsLibrary('routes');\n// const mapsLib = useMapsLibrary('maps');\n// const geocoding = useMapsLibrary('geocoding');\nconst markerLib=useMapsLibrary(\"marker\");const[marker,setMarker]=useState();const map=useMap();React.useEffect(()=>{if(map){map.setCenter(currPos);// Show user's location using the built-in dot\n// setMarker(new markerLib.Marker({\n//   position: currPos,\n//   map: map,\n//   title: 'Your Location',\n// }));\n}},[map,currPos]);}function GetRouteButton(_ref3){let{origin,destination,setPlans,setScores,setSelected}=_ref3;// const geocoding = useMapsLibrary('geocoding');\n// const routes = useMapsLibrary('routes');\nconst getCoordinates=formatedAddress=>{const latitude=formatedAddress.geometry.location.lat();const longitude=formatedAddress.geometry.location.lng();return[latitude,longitude];};const callMyFunction=async()=>{try{const coordOrigin=getCoordinates(origin);const coordDest=getCoordinates(destination);console.log(coordOrigin);const response=await fetch(\"http://localhost:\".concat(serverPort,\"/myFunction\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({origin:coordOrigin,destination:coordDest})});if(!response.ok){throw new Error('Network response was not ok');}const data=await response.json();console.log(data);const[plans,routeScores]=data;setPlans(plans);setScores(routeScores);setSelected(routeScores[0].planId-1);// displayRoute(plans[0]);\n}catch(error){console.error('There has been a problem with your fetch operation:',error);}};return/*#__PURE__*/_jsx(\"button\",{onClick:callMyFunction,children:\"Get Route\"});}function DisplayRoute(_ref4){let{routePlans,selectedPlanIndex}=_ref4;const[directionsDisplays,setDirectionsDisplays]=useState([]);const routes=useMapsLibrary('routes');const map=useMap();React.useEffect(()=>{if(map&&routePlans){displayRoute(routePlans[selectedPlanIndex]);}},[routePlans,selectedPlanIndex]);const displayRoute=routeInfo=>{const directionsService=new routes.DirectionsService();// Clear existing directions renderers\ndirectionsDisplays.forEach(display=>display.setMap(null));setDirectionsDisplays([]);const getGeographic=location=>{if(location.hasOwnProperty('stop')){return location.stop.centre.geographic;}else if(location.hasOwnProperty('origin')){if(location.origin.hasOwnProperty('monument')){return location.origin.monument.address.centre.geographic;}else if(location.origin.hasOwnProperty('point')){return location.origin.point.centre.geographic;}else{return location.origin.address.centre.geographic;}}else if(location.hasOwnProperty('destination')){if(location.destination.hasOwnProperty('monument')){return location.destination.monument.address.centre.geographic;}else if(location.destination.hasOwnProperty('point')){return location.destination.point.centre.geographic;}else{return location.destination.address.centre.geographic;}}return null;};const newDirectionsDisplays=[];routeInfo.segments.forEach((segment,index)=>{console.log(segment);if(segment.type==='walk'||segment.type==='transfer'){const fromGeographic=getGeographic(segment.from);const toGeographic=getGeographic(segment.to);const request={origin:{lat:parseFloat(fromGeographic.latitude),lng:parseFloat(fromGeographic.longitude)},destination:{lat:parseFloat(toGeographic.latitude),lng:parseFloat(toGeographic.longitude)},travelMode:'WALKING'};const polylineOptionsThis=segment.type==='walk'||segment.type==='transfer'?polylineOptions:{};const directionsDisplay=new routes.DirectionsRenderer({map:map,polylineOptions:polylineOptionsThis});newDirectionsDisplays.push(directionsDisplay);directionsService.route(request,(result,status)=>{if(status==='OK'){directionsDisplay.setDirections(result);}});}else if(segment.type==='ride'){const nextSeg=routeInfo.segments[index+1];const toGeographic=getGeographic(nextSeg.from);const prevSeg=routeInfo.segments[index-1];const fromGeographic=getGeographic(prevSeg.to);const request={origin:{lat:parseFloat(fromGeographic.latitude),lng:parseFloat(fromGeographic.longitude)},destination:{lat:parseFloat(toGeographic.latitude),lng:parseFloat(toGeographic.longitude)},travelMode:'TRANSIT',transitOptions:{routingPreference:'LESS_WALKING'}};const directionsDisplay=new routes.DirectionsRenderer({map:map});newDirectionsDisplays.push(directionsDisplay);directionsService.route(request,(result,status)=>{if(status==='OK'){directionsDisplay.setDirections(result);}});}});setDirectionsDisplays(newDirectionsDisplays);};}function RouteCards(_ref5){let{routePlans,routeScores,setSelected}=_ref5;const cards=[];for(let i=0;i<routeScores.length;i++){const thisRoutePlan=routePlans[routeScores[i].planId-1];let routeText=thisRoutePlan.segments.map((segment,index)=>{let segmentText='';if(segment.type==='ride'){segmentText=/*#__PURE__*/_jsxs(\"div\",{className:\"segment\",children:[\"\\u25CF \",/*#__PURE__*/_jsx(\"strong\",{children:\"Ride:\"}),\" Riding: \",segment.times.durations.riding,\" min, Bus: \",segment.route.key]},index);}else if(segment.type==='walk'){segmentText=/*#__PURE__*/_jsxs(\"div\",{className:\"segment\",children:[\"\\u25CF \",/*#__PURE__*/_jsx(\"strong\",{children:\"Walk:\"}),\" Walking: \",segment.times.durations.walking,\" min\"]},index);}else if(segment.type==='transfer'){segmentText=/*#__PURE__*/_jsxs(\"div\",{className:\"segment\",children:[\"\\u25CF \",/*#__PURE__*/_jsx(\"strong\",{children:\"Transfer:\"}),\" Walking: \",segment.times.durations.walking,\" min, Waiting: \",segment.times.durations.waiting,\" min(\",segment.to.stop.isSheltered?\"sheltered\":\"unsheltered\",\")\"]},index);}return segmentText;});cards.push({id:i+1,title:'Route '+(i+1),description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Score:\"}),\" \",routeScores[i].score.toFixed(2),\" | \",/*#__PURE__*/_jsx(\"strong\",{children:\"Time Outside:\"}),\" \",routeScores[i].totalTimeOutside,\" min\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"segments\",children:routeText})]})});}const handleClick=index=>{setSelected(routeScores[index-1].planId-1);};return/*#__PURE__*/_jsx(\"div\",{className:\"cards-container\",children:cards.map(card=>/*#__PURE__*/_jsxs(\"div\",{className:\"card\",onClick:()=>handleClick(card.id),children:[/*#__PURE__*/_jsx(\"h2\",{children:card.title}),/*#__PURE__*/_jsx(\"div\",{children:card.description})]},card.id))});}export default App;","map":{"version":3,"names":["React","useState","useRef","APIProvider","Map","useMap","useMapsLibrary","PlaceAutocompleteClassic","jsx","_jsx","jsxs","_jsxs","serverPort","googleMapsApiKey","containerStyle","width","height","center","lat","lng","lineSymbol","path","strokeOpacity","scale","polylineOptions","geodesic","strokeColor","strokeWeight","icons","icon","offset","repeat","App","origin","setOrigin","destination","setDestination","currentPosition","setCurrentPosition","routePlans","setRoutePlans","selectedPlanIndex","setSelectedPlanIndex","scores","setScores","className","children","apiKey","style","marginBottom","onPlaceSelect","currPos","GetRouteButton","setPlans","setSelected","defaultZoom","defaultCenter","gestureHandling","disableDefaultUI","GetCurrentCoord","setPos","Directions","RouteCards","routeScores","DisplayRoute","_ref","useEffect","fetchCurrentPosition","pos","getCurrentCoord","error","console","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","_ref2","markerLib","marker","setMarker","map","setCenter","_ref3","getCoordinates","formatedAddress","geometry","location","callMyFunction","coordOrigin","coordDest","log","response","fetch","concat","method","headers","body","JSON","stringify","ok","Error","data","json","plans","planId","onClick","_ref4","directionsDisplays","setDirectionsDisplays","routes","displayRoute","routeInfo","directionsService","DirectionsService","forEach","display","setMap","getGeographic","hasOwnProperty","stop","centre","geographic","monument","address","point","newDirectionsDisplays","segments","segment","index","type","fromGeographic","from","toGeographic","to","request","parseFloat","travelMode","polylineOptionsThis","directionsDisplay","DirectionsRenderer","push","route","result","status","setDirections","nextSeg","prevSeg","transitOptions","routingPreference","_ref5","cards","i","length","thisRoutePlan","routeText","segmentText","times","durations","riding","key","walking","waiting","isSheltered","id","title","description","score","toFixed","totalTimeOutside","handleClick","card"],"sources":["C:/Users/wasdp/Desktop/MyProgrammingLab/Commute Compass/Commute Compass - React Version/clone/Commute-Compass/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport {APIProvider, Map, useMap, useMapsLibrary} from '@vis.gl/react-google-maps';\nimport {PlaceAutocompleteClassic} from './autocomplete-classic';\nimport './App.css';\n\n\nconst serverPort = 3001;\nconst googleMapsApiKey = \"AIzaSyDjpkA1wkyhf5VjzfkeIOqP9IzZLn55C80\";\n\nconst containerStyle = {\n  width: '100%',\n  height: '400px'\n};\n\nconst center = {\n  lat: 49.8951,\n  lng: -97.1384\n};\n\n// Define a symbol using SVG path notation, with an opacity of 1.\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4,\n};\n\nconst polylineOptions = {\n  geodesic: true,\n  strokeColor: '#FF0000', \n  strokeOpacity: 0,\n  strokeWeight: 2,\n  icons: [\n    {\n      icon: lineSymbol,\n      offset: \"0\",\n      repeat: \"20px\",\n    },\n  ],\n};\n\n\nconst App = () => {\n  // const { isLoaded } = useJsApiLoader({\n  //   googleMapsApiKey: googleMapsApiKey,\n  //   libraries: libraries,\n  // });\n  const [origin, setOrigin] = useState('');\n  const [destination, setDestination] = useState(''); \n  const [currentPosition, setCurrentPosition] = useState(null);\n  const [routePlans, setRoutePlans] = useState([]);\n  const [selectedPlanIndex, setSelectedPlanIndex] = useState(0);\n  const [scores, setScores] = useState([]);\n\n  // console.log(currentPosition);\n\n  return (\n    <div className=\"App\">\n      <APIProvider apiKey={googleMapsApiKey}>\n        <h1>Commute Compass</h1>\n        <div style={{ marginBottom: '10px' }}>\n          <strong>Origin:</strong><PlaceAutocompleteClassic onPlaceSelect={setOrigin} currPos={currentPosition} /> \n          <strong>Destination:</strong><PlaceAutocompleteClassic onPlaceSelect={setDestination} currPos={currentPosition} />\n          <GetRouteButton origin={origin} destination={destination} setPlans={setRoutePlans} setScores={setScores} setSelected={setSelectedPlanIndex} />\n        </div>\n        <div style={containerStyle}>\n        <Map\n          defaultZoom={12}\n          defaultCenter={center}\n          gestureHandling={'greedy'}\n          disableDefaultUI={false}\n        />\n        </div>\n        <GetCurrentCoord setPos={setCurrentPosition} />\n        <Directions currPos={currentPosition} />\n        <RouteCards routePlans={routePlans} routeScores={scores} setSelected={setSelectedPlanIndex} />\n        <DisplayRoute routePlans={routePlans} selectedPlanIndex={selectedPlanIndex} />\n      </APIProvider>\n    </div>\n  );\n};\n\nfunction GetCurrentCoord({setPos}) {\n  React.useEffect(() => {\n    const fetchCurrentPosition = async () => {\n      try {\n        const pos = await getCurrentCoord();\n        setPos(pos);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchCurrentPosition();\n  }, []);\n\n  const getCurrentCoord = () => {\n    return new Promise((resolve, reject) => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            };\n            resolve(pos);\n          },\n          () => {\n            console.error(\"Error: The Geolocation service failed.\");\n            reject(\"Error: The Geolocation service failed.\");\n          }\n        );\n      } else {\n        console.error(\"Error: Your browser doesn't support geolocation.\");\n        reject(\"Error: Your browser doesn't support geolocation.\");\n      }\n    });\n  };\n}\n\nfunction Directions( {currPos} ) {\n  // const places = useMapsLibrary('places');\n  // const routes = useMapsLibrary('routes');\n  // const mapsLib = useMapsLibrary('maps');\n  // const geocoding = useMapsLibrary('geocoding');\n  const markerLib = useMapsLibrary(\"marker\");\n  const [marker, setMarker] = useState();\n\n  const map = useMap();\n\n  React.useEffect(() => {\n    if (map) {\n      map.setCenter(currPos);\n      // Show user's location using the built-in dot\n      // setMarker(new markerLib.Marker({\n      //   position: currPos,\n      //   map: map,\n      //   title: 'Your Location',\n      // }));\n    }\n  }, [map, currPos]);\n\n}\n\nfunction GetRouteButton({ origin, destination, setPlans, setScores, setSelected }) {\n  // const geocoding = useMapsLibrary('geocoding');\n  // const routes = useMapsLibrary('routes');\n\n  const getCoordinates = (formatedAddress) => {\n    const latitude = formatedAddress.geometry.location.lat();\n    const longitude = formatedAddress.geometry.location.lng();\n    return([latitude, longitude]);\n  };\n\n  const callMyFunction = async () => {\n    try {\n      const coordOrigin = getCoordinates(origin);\n      const coordDest = getCoordinates(destination);\n      console.log(coordOrigin);\n      const response = await fetch(`http://localhost:${serverPort}/myFunction`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          origin: coordOrigin,\n          destination: coordDest,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const [plans, routeScores] = data;\n      setPlans(plans);\n      setScores(routeScores);\n      setSelected(routeScores[0].planId-1);\n      // displayRoute(plans[0]);\n    } catch (error) {\n      console.error('There has been a problem with your fetch operation:', error);\n    }\n  };\n\n\n\n  return(<button onClick={callMyFunction}>Get Route</button>);\n}\n\nfunction DisplayRoute({routePlans, selectedPlanIndex}) {\n  const [directionsDisplays, setDirectionsDisplays] = useState([]);\n  const routes = useMapsLibrary('routes');\n  const map = useMap();\n\n  React.useEffect(() => {\n    if (map && routePlans) {\n      displayRoute(routePlans[selectedPlanIndex]);\n    }\n  }, [routePlans, selectedPlanIndex]);\n\n  const displayRoute = (routeInfo) => {\n\n    const directionsService = new routes.DirectionsService();\n  \n    // Clear existing directions renderers\n    directionsDisplays.forEach(display => display.setMap(null));\n    setDirectionsDisplays([]);\n  \n    const getGeographic = (location) => {\n      if (location.hasOwnProperty('stop')) {\n        return location.stop.centre.geographic;\n      } else if (location.hasOwnProperty('origin')) {\n        if (location.origin.hasOwnProperty('monument')) {\n          return location.origin.monument.address.centre.geographic;\n        } else if (location.origin.hasOwnProperty('point')) {\n          return location.origin.point.centre.geographic;\n        } else {\n          return location.origin.address.centre.geographic;\n        }\n      } else if (location.hasOwnProperty('destination')) {\n        if (location.destination.hasOwnProperty('monument')) {\n          return location.destination.monument.address.centre.geographic;\n        } else if (location.destination.hasOwnProperty('point')) {\n          return location.destination.point.centre.geographic;\n        } else {\n          return location.destination.address.centre.geographic;\n        }\n      }\n      return null;\n    };\n  \n    const newDirectionsDisplays = [];\n  \n    routeInfo.segments.forEach((segment, index) => {\n      console.log(segment);\n      if (segment.type === 'walk' || segment.type === 'transfer') {\n        const fromGeographic = getGeographic(segment.from);\n        const toGeographic = getGeographic(segment.to);\n        const request = {\n          origin: { lat: parseFloat(fromGeographic.latitude), lng: parseFloat(fromGeographic.longitude) },\n          destination: { lat: parseFloat(toGeographic.latitude), lng: parseFloat(toGeographic.longitude) },\n          travelMode: 'WALKING'\n        };\n  \n        const polylineOptionsThis = (segment.type === 'walk' || segment.type === 'transfer') ? polylineOptions : {};\n  \n        const directionsDisplay = new routes.DirectionsRenderer({\n          map: map,\n          polylineOptions: polylineOptionsThis\n        });\n        newDirectionsDisplays.push(directionsDisplay);\n  \n        directionsService.route(request, (result, status) => {\n          if (status === 'OK') {\n            directionsDisplay.setDirections(result);\n          }\n        });\n      } else if (segment.type === 'ride') {\n        const nextSeg = routeInfo.segments[index + 1];\n        const toGeographic = getGeographic(nextSeg.from);\n        const prevSeg = routeInfo.segments[index - 1];\n        const fromGeographic = getGeographic(prevSeg.to);\n  \n        const request = {\n          origin: { lat: parseFloat(fromGeographic.latitude), lng: parseFloat(fromGeographic.longitude) },\n          destination: { lat: parseFloat(toGeographic.latitude), lng: parseFloat(toGeographic.longitude) },\n          travelMode: 'TRANSIT',\n          transitOptions: {\n            routingPreference: 'LESS_WALKING'\n          }\n        };\n  \n        const directionsDisplay = new routes.DirectionsRenderer({ map: map });\n        newDirectionsDisplays.push(directionsDisplay);\n  \n        directionsService.route(request, (result, status) => {\n          if (status === 'OK') {\n            directionsDisplay.setDirections(result);\n          }\n        });\n      }\n    });\n  \n    setDirectionsDisplays(newDirectionsDisplays);\n  };\n}\n\n\n\nfunction RouteCards({ routePlans, routeScores, setSelected }) {\n  const cards = [];\n\n  for (let i = 0; i < routeScores.length; i++) {\n    const thisRoutePlan = routePlans[routeScores[i].planId - 1];\n    let routeText = thisRoutePlan.segments.map((segment, index) => {\n      let segmentText = '';\n      if (segment.type === 'ride') {\n        segmentText = (\n          <div key={index} className=\"segment\">\n            ● <strong>Ride:</strong> Riding: {segment.times.durations.riding} min, Bus: {segment.route.key}\n          </div>\n        );\n      } else if (segment.type === 'walk') {\n        segmentText = (\n          <div key={index} className=\"segment\">\n            ● <strong>Walk:</strong> Walking: {segment.times.durations.walking} min\n          </div>\n        );\n      } else if (segment.type === 'transfer') {\n        segmentText = (\n          <div key={index} className=\"segment\">\n            ● <strong>Transfer:</strong> Walking: {segment.times.durations.walking} min, Waiting: {segment.times.durations.waiting} min({segment.to.stop.isSheltered ? \"sheltered\" : \"unsheltered\"})\n          </div>\n        );\n      }\n      return segmentText;\n    });\n\n    cards.push({\n      id: i + 1,\n      title: 'Route ' + (i + 1),\n      description: (\n        <div>\n          <div><strong>Score:</strong> {routeScores[i].score.toFixed(2)} | <strong>Time Outside:</strong> {routeScores[i].totalTimeOutside} min</div>\n          <div className=\"segments\">{routeText}</div>\n        </div>\n      ),\n    });\n  }\n\n  const handleClick = (index) => {\n    setSelected(routeScores[index - 1].planId - 1);\n  };\n\n  return (\n    <div className=\"cards-container\">\n      {cards.map((card) => (\n        <div key={card.id} className=\"card\" onClick={() => handleClick(card.id)}>\n          <h2>{card.title}</h2>\n          <div>{card.description}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}